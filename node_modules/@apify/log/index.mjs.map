{"version":3,"sources":["../src/logger_text.ts","../src/logger.ts","../src/log_consts.ts","../src/log_helpers.ts","../src/logger_json.ts","../src/log.ts","../src/index.ts"],"sourcesContent":["import c from 'ansi-colors';\nimport { Logger } from './logger';\nimport { LEVEL_TO_STRING, LogLevel, PREFIX_DELIMITER } from './log_consts';\n\nconst SHORTEN_LEVELS = {\n    SOFT_FAIL: 'SFAIL',\n    WARNING: 'WARN',\n};\n\nconst LEVEL_TO_COLOR = {\n    [LogLevel.ERROR]: 'red',\n    [LogLevel.SOFT_FAIL]: 'red',\n    [LogLevel.WARNING]: 'yellow',\n    [LogLevel.INFO]: 'green',\n    [LogLevel.DEBUG]: 'blue',\n    [LogLevel.PERF]: 'magenta',\n};\n\nconst SHORTENED_LOG_LEVELS = LEVEL_TO_STRING.map((level) => SHORTEN_LEVELS[level] || level);\nconst MAX_LEVEL_LENGTH_SPACES = Math.max(...SHORTENED_LOG_LEVELS.map((l) => l.length));\n\nconst getLevelIndent = (level: string) => {\n    let spaces = '';\n\n    for (let i = 0; i < MAX_LEVEL_LENGTH_SPACES - level.length; i++) spaces += ' ';\n\n    return spaces;\n};\n\nconst DEFAULT_OPTIONS = {\n    skipTime: true,\n};\n\nexport interface Exception extends Error {\n    type?: string;\n    details?: Record<string, any>;\n    reason?: string;\n}\n\nexport class LoggerText extends Logger {\n    constructor(options = {}) {\n        super({ ...DEFAULT_OPTIONS, ...options });\n    }\n\n    _log(level: LogLevel, message: string, data?: any, exception?: Exception, opts: Record<string, any> = {}) {\n        let { prefix, suffix } = opts;\n\n        let maybeDate = '';\n        if (!this.options.skipTime) {\n            maybeDate = `${(new Date()).toISOString().replace('Z', '').replace('T', ' ')} `;\n        }\n\n        const errStack = exception ? this._parseException(exception) : '';\n        const color = LEVEL_TO_COLOR[level];\n        const levelStr = SHORTENED_LOG_LEVELS[level];\n        const levelIndent = getLevelIndent(levelStr);\n        const dataStr = !data ? '' : ` ${JSON.stringify(data)}`;\n\n        prefix = prefix ? ` ${prefix}${PREFIX_DELIMITER}` : '';\n        suffix = suffix ? ` ${suffix}` : '';\n\n        const line = `${c.gray(maybeDate)}${c[color](levelStr)}${levelIndent}${c.yellow(prefix)} ${message || ''}${c.gray(dataStr)}${c.yellow(suffix)}${errStack}`; // eslint-disable-line\n        this._outputWithConsole(level, line);\n\n        return line;\n    }\n\n    _parseException(exception: Exception) {\n        let errStack = '';\n\n        // Parse error.type and error.details from ApifyClientError.\n        const errDetails = [];\n        if (exception.type) errDetails.push(`type=${exception.type}`);\n        if (exception.details) {\n            Object.entries(exception.details).map(([key, val]) => errDetails.push(`${key}=${val}`));\n        }\n\n        // Parse error stack lines.\n        // NOTE: Reason is here to support Meteor.js like errors.\n        const errorString = exception.stack || exception.reason || exception.toString();\n        const errorLines = errorString.split('\\n');\n\n        // Add details to a first line.\n        if (errDetails.length) errorLines[0] += c.gray(`(details: ${errDetails.join(', ')})`);\n\n        // Compose it back.\n        errStack = errorLines.map((line) => `  ${line}`).join('\\n');\n        errStack = `\\n${errStack}`;\n\n        return errStack;\n    }\n}\n","/* eslint-disable no-console */\nimport { EventEmitter } from 'events';\nimport { LogLevel } from './log_consts';\nimport { Exception } from './logger_text';\n\n/**\n * This is an abstract class that should\n * be extended by custom logger classes.\n *\n * this._log() method must be implemented by them.\n */\nexport class Logger extends EventEmitter {\n    constructor(protected options: Record<string, any>) {\n        super();\n    }\n\n    setOptions(options: Record<string, any>) {\n        this.options = { ...this.options, ...options };\n    }\n\n    getOptions() {\n        return this.options;\n    }\n\n    _outputWithConsole(level: LogLevel, line: string) {\n        switch (level) {\n            case LogLevel.ERROR:\n                console.error(line);\n                break;\n            case LogLevel.WARNING:\n                console.warn(line);\n                break;\n            case LogLevel.DEBUG:\n                console.debug(line);\n                break;\n            default:\n                console.log(line);\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _log(level: LogLevel, message: string, data?: any, exception?: Exception, opts: Record<string, any> = {}) {\n        throw new Error('log() method must be implemented!');\n    }\n\n    log(level: LogLevel, message: string, ...args: any[]) {\n        const line = this._log(level, message, ...args);\n        this.emit('line', line);\n    }\n}\n","export enum LogLevel {\n    // Turns off logging completely\n    OFF = 0,\n    // For unexpected errors in Apify system\n    ERROR = 1,\n    // For situations where error is caused by user (e.g. Meteor.Error), i.e. when the error is not\n    // caused by Apify system, avoid the word \"ERROR\" to simplify searching in log\n    SOFT_FAIL = 2,\n    WARNING = 3,\n    INFO = 4,\n    DEBUG = 5,\n    // for performance stats\n    PERF = 6,\n}\n\nexport enum LogFormat {\n    JSON = 'JSON',\n    TEXT = 'TEXT',\n}\n\nexport const PREFIX_DELIMITER = ':';\nexport const LEVELS = LogLevel;\n\n// Inverse of LOG_LEVELS = maps log level to string.\nexport const LEVEL_TO_STRING = Object.keys(LogLevel).filter((x) => Number.isNaN(+x));\n","import { APIFY_ENV_VARS } from '@apify/consts';\nimport { LogLevel, LogFormat } from './log_consts';\n\n/**\n * Ensures a string is shorter than a specified number of character, and truncates it if not, appending a specific suffix to it.\n * (copied from utilities package so logger do not have to depend on all of its dependencies)\n */\nexport function truncate(str: string, maxLength: number, suffix = '...[truncated]'): string {\n    maxLength = Math.floor(maxLength);\n\n    // TODO: we should just ignore rest of the suffix...\n    if (suffix.length > maxLength) {\n        throw new Error('suffix string cannot be longer than maxLength');\n    }\n\n    if (typeof str === 'string' && str.length > maxLength) {\n        str = str.substr(0, maxLength - suffix.length) + suffix;\n    }\n\n    return str;\n}\n\n/**\n * Gets log level from env variable. Both integers and strings (WARNING) are supported.\n */\nexport function getLevelFromEnv(): number {\n    const envVar = process.env[APIFY_ENV_VARS.LOG_LEVEL];\n\n    if (!envVar) return LogLevel.INFO;\n    if (Number.isFinite(+envVar)) return +envVar;\n    if (LogLevel[envVar]) return LogLevel[envVar];\n\n    return +envVar;\n}\n\n/**\n * Gets log format from env variable. Currently, values 'JSON' and 'TEXT' are supported.\n * Defaults to 'TEXT' if no value is specified.\n */\nexport function getFormatFromEnv(): LogFormat {\n    const envVar = process.env[APIFY_ENV_VARS.LOG_FORMAT] || LogFormat.TEXT;\n\n    switch (envVar.toLowerCase()) {\n        case LogFormat.JSON.toLowerCase():\n            return LogFormat.JSON;\n        case LogFormat.TEXT.toLowerCase():\n            return LogFormat.TEXT;\n        default:\n            // eslint-disable-next-line no-console\n            console.warn(`Unknown value for environment variable ${APIFY_ENV_VARS.LOG_FORMAT}: ${envVar}`);\n            return LogFormat.TEXT;\n    }\n}\n\n/**\n * Limits given object to given depth and escapes function with [function] string.\n *\n * ie. Replaces object's content by '[object]' and array's content\n * by '[array]' when the value is nested more than given limit.\n */\nexport function limitDepth<T>(record: T, depth: number, maxStringLength?: number): T | undefined {\n    // handle common cases quickly\n    if (typeof record === 'string') {\n        return maxStringLength && record.length > maxStringLength ? truncate(record, maxStringLength) as unknown as T : record;\n    }\n\n    if (['number', 'boolean'].includes(typeof record) || record == null || record instanceof Date) {\n        return record;\n    }\n\n    // WORKAROUND: Error's properties are not iterable, convert it to a simple object and preserve custom properties\n    // NOTE: _.isError() doesn't work on Match.Error\n    if (record instanceof Error) {\n        const { name, message, stack, ...rest } = record;\n        record = { name, message, stack, ...rest } as unknown as T;\n    }\n\n    const nextCall = (rec: T) => limitDepth(rec, depth - 1, maxStringLength);\n\n    if (Array.isArray(record)) {\n        return (depth ? record.map(nextCall) : '[array]') as unknown as T;\n    }\n\n    if (typeof record === 'object' && record !== null) {\n        const mapObject = <U extends Record<PropertyKey, any>> (obj: U) => {\n            const res = {} as U;\n            Object.keys(obj).forEach((key: keyof U) => {\n                res[key as keyof U] = nextCall(obj[key]) as U[keyof U];\n            });\n            return res;\n        };\n\n        return depth ? mapObject(record) : '[object]' as unknown as T;\n    }\n\n    // Replaces all function with [function] string\n    if (typeof record === 'function') {\n        return '[function]' as unknown as T;\n    }\n\n    // this shouldn't happen\n    // eslint-disable-next-line no-console\n    console.log(`WARNING: Object cannot be logged: ${record}`);\n\n    return undefined;\n}\n","import { PREFIX_DELIMITER, LogLevel } from './log_consts';\nimport { Logger } from './logger';\nimport { Exception } from './logger_text';\n\nconst DEFAULT_OPTIONS = {\n    skipLevelInfo: false,\n    skipTime: false,\n};\n\nexport class LoggerJson extends Logger {\n    constructor(options = {}) {\n        super({ ...DEFAULT_OPTIONS, ...options });\n    }\n\n    _log(level: LogLevel, message: string, data?: any, exception?: Exception, opts: Record<string, any> = {}) {\n        const { prefix, suffix } = opts;\n\n        if (exception) data = { ...data, exception };\n        if (prefix) message = `${prefix}${PREFIX_DELIMITER} ${message}`;\n        if (suffix) message = `${message} ${suffix}`;\n\n        // Use short names to save log space.\n        // In development mode show more concise log otherwise it's impossible to see anything in it.\n        // Message must be shown early for people to see!\n        // NOTE: not adding time and host on production, because LogDNA adds it by default and log space is expensive\n        const rec = {\n            time: !this.options.skipTime ? new Date() : undefined,\n            level: this.options.skipLevelInfo && level === LogLevel.INFO ? undefined : LogLevel[level],\n            msg: message,\n            ...data,\n        };\n\n        const line = JSON.stringify(rec);\n        this._outputWithConsole(level, line);\n\n        return line;\n    }\n}\n","import { LoggerText } from './logger_text';\nimport { Logger } from './logger';\nimport { LogFormat, LogLevel, PREFIX_DELIMITER } from './log_consts';\nimport { getFormatFromEnv, getLevelFromEnv, limitDepth } from './log_helpers';\nimport { LoggerJson } from './logger_json';\n\nexport interface LoggerOptions {\n    /**\n     * Sets the log level to the given value, preventing messages from less important log levels\n     * from being printed to the console. Use in conjunction with the `log.LEVELS` constants.\n     */\n    level?: number;\n    /** Max depth of data object that will be logged. Anything deeper than the limit will be stripped off. */\n    maxDepth?: number;\n    /** Max length of the string to be logged. Longer strings will be truncated. */\n    maxStringLength?: number;\n    /** Prefix to be prepended the each logged line. */\n    prefix?: string | null;\n    /** Suffix that will be appended the each logged line. */\n    suffix?: string | null;\n    /**\n     * Logger implementation to be used. Default one is log.LoggerText to log messages as easily readable\n     * strings. Optionally you can use `log.LoggerJson` that formats each log line as a JSON.\n     */\n    logger?: Logger;\n    /** Additional data to be added to each log line. */\n    data?: Record<string, unknown>,\n}\n\nconst getLoggerForFormat = (format: LogFormat): Logger => {\n    switch (format) {\n        case LogFormat.JSON:\n            return new LoggerJson();\n        case LogFormat.TEXT:\n        default:\n            return new LoggerText();\n    }\n};\n\nconst getDefaultOptions = () => ({\n    level: getLevelFromEnv(),\n    maxDepth: 4,\n    maxStringLength: 2000,\n    prefix: null,\n    suffix: null,\n    logger: getLoggerForFormat(getFormatFromEnv()),\n    data: {},\n});\n\ntype AdditionalData = Record<string, any> | null;\n\n/**\n * The log instance enables level aware logging of messages and we advise\n * to use it instead of `console.log()` and its aliases in most development\n * scenarios.\n *\n * A very useful use case for `log` is using `log.debug` liberally throughout\n * the codebase to get useful logging messages only when appropriate log level is set\n * and keeping the console tidy in production environments.\n *\n * The available logging levels are, in this order: `DEBUG`, `INFO`, `WARNING`, `ERROR`, `OFF`\n * and can be referenced from the `log.LEVELS` constant, such as `log.LEVELS.ERROR`.\n *\n * To log messages to the system console, use the `log.level(message)` invocation,\n * such as `log.debug('this is a debug message')`.\n *\n * To prevent writing of messages above a certain log level to the console, simply\n * set the appropriate level. The default log level is `INFO`, which means that\n * `DEBUG` messages will not be printed, unless enabled.\n *\n * **Example:**\n * ```js\n * import log from '@apify/log';\n *\n * // importing from the Apify SDK or Crawlee is also supported:\n * // import { log } from 'apify';\n * // import { log } from 'crawlee';\n *\n * log.info('Information message', { someData: 123 }); // prints message\n * log.debug('Debug message', { debugData: 'hello' }); // doesn't print anything\n *\n * log.setLevel(log.LEVELS.DEBUG);\n * log.debug('Debug message'); // prints message\n *\n * log.setLevel(log.LEVELS.ERROR);\n * log.debug('Debug message'); // doesn't print anything\n * log.info('Info message'); // doesn't print anything\n * log.error('Error message', { errorDetails: 'This is bad!' }); // prints message\n *\n * try {\n *   throw new Error('Not good!');\n * } catch (e) {\n *   log.exception(e, 'Exception occurred', { errorDetails: 'This is really bad!' }); // prints message\n * }\n *\n * log.setOptions({ prefix: 'My actor' });\n * log.info('I am running!'); // prints \"My actor: I am running\"\n *\n * const childLog = log.child({ prefix: 'Crawler' });\n * log.info('I am crawling!'); // prints \"My actor:Crawler: I am crawling\"\n * ```\n *\n * Another very useful way of setting the log level is by setting the `APIFY_LOG_LEVEL`\n * environment variable, such as `APIFY_LOG_LEVEL=DEBUG`. This way, no code changes\n * are necessary to turn on your debug messages and start debugging right away.\n *\n * To add timestamps to your logs, you can override the default logger settings:\n * ```js\n * log.setOptions({\n *     logger: new log.LoggerText({ skipTime: false }),\n * });\n * ```\n * You can customize your logging further by extending or replacing the default\n * logger instances with your own implementations.\n */\nexport class Log {\n    /**\n     * Map of available log levels that's useful for easy setting of appropriate log levels.\n     * Each log level is represented internally by a number. Eg. `log.LEVELS.DEBUG === 5`.\n     */\n    readonly LEVELS = LogLevel; // for BC\n\n    private options: Required<LoggerOptions>;\n\n    private readonly warningsOnceLogged: Set<string> = new Set();\n\n    constructor(options: Partial<LoggerOptions> = {}) {\n        this.options = { ...getDefaultOptions(), ...options };\n\n        if (!LogLevel[this.options.level]) throw new Error('Options \"level\" must be one of log.LEVELS enum!');\n        if (typeof this.options.maxDepth !== 'number') throw new Error('Options \"maxDepth\" must be a number!');\n        if (typeof this.options.maxStringLength !== 'number') throw new Error('Options \"maxStringLength\" must be a number!');\n        if (this.options.prefix && typeof this.options.prefix !== 'string') throw new Error('Options \"prefix\" must be a string!');\n        if (this.options.suffix && typeof this.options.suffix !== 'string') throw new Error('Options \"suffix\" must be a string!');\n        if (typeof this.options.logger !== 'object') throw new Error('Options \"logger\" must be an object!');\n        if (typeof this.options.data !== 'object') throw new Error('Options \"data\" must be an object!');\n    }\n\n    private _limitDepth(obj: any) {\n        return limitDepth(obj, this.options.maxDepth);\n    }\n\n    /**\n     * Returns the currently selected logging level. This is useful for checking whether a message\n     * will actually be printed to the console before one actually performs a resource intensive operation\n     * to construct the message, such as querying a DB for some metadata that need to be added. If the log\n     * level is not high enough at the moment, it doesn't make sense to execute the query.\n     */\n    getLevel() {\n        return this.options.level;\n    }\n\n    /**\n     * Sets the log level to the given value, preventing messages from less important log levels\n     * from being printed to the console. Use in conjunction with the `log.LEVELS` constants such as\n     *\n     * ```\n     * log.setLevel(log.LEVELS.DEBUG);\n     * ```\n     *\n     * Default log level is INFO.\n     */\n    setLevel(level: LogLevel) {\n        if (!LogLevel[level]) throw new Error('Options \"level\" must be one of log.LEVELS enum!');\n\n        this.options.level = level;\n    }\n\n    internal(level: LogLevel, message: string, data?: any, exception?: any) {\n        if (level > this.options.level) return;\n\n        data = { ...this.options.data, ...data };\n        data = Object.keys(data).length > 0 ? this._limitDepth(data) : undefined;\n        exception = this._limitDepth(exception);\n\n        this.options.logger.log(level, message, data, exception, {\n            prefix: this.options.prefix,\n            suffix: this.options.suffix,\n        });\n    }\n\n    /**\n     * Configures logger.\n     */\n    setOptions(options: Partial<LoggerOptions>) {\n        this.options = { ...this.options, ...options };\n    }\n\n    /**\n     * Returns the logger configuration.\n     */\n    getOptions(): Required<LoggerOptions> {\n        return { ...this.options };\n    }\n\n    /**\n     * Creates a new instance of logger that inherits settings from a parent logger.\n     */\n    child(options: Partial<LoggerOptions>) {\n        let { prefix } = this.options;\n\n        if (options.prefix) {\n            prefix = prefix\n                ? `${prefix}${PREFIX_DELIMITER}${options.prefix}`\n                : options.prefix;\n        }\n\n        const data = options.data\n            ? { ...this.options.data, ...options.data }\n            : this.options.data;\n\n        const newOptions = {\n            ...this.options,\n            ...options,\n            prefix,\n            data,\n        };\n\n        return new Log(newOptions);\n    }\n\n    /**\n     * Logs an `ERROR` message. Use this method to log error messages that are not directly connected\n     * to an exception. For logging exceptions, use the `log.exception` method.\n     */\n    error(message: string, data?: AdditionalData) {\n        this.internal(LogLevel.ERROR, message, data);\n    }\n\n    /**\n     * Logs an `ERROR` level message with a nicely formatted exception. Note that the exception is the first parameter\n     * here and an additional message is only optional.\n     */\n    exception(exception: Error, message: string, data?: AdditionalData) {\n        this.internal(LogLevel.ERROR, message, data, exception);\n    }\n\n    softFail(message: string, data?: AdditionalData) {\n        this.internal(LogLevel.SOFT_FAIL, message, data);\n    }\n\n    /**\n     * Logs a `WARNING` level message. Data are stringified and appended to the message.\n     */\n    warning(message: string, data?: AdditionalData) {\n        this.internal(LogLevel.WARNING, message, data);\n    }\n\n    /**\n     * Logs an `INFO` message. `INFO` is the default log level so info messages will be always logged,\n     * unless the log level is changed. Data are stringified and appended to the message.\n     */\n    info(message: string, data?: AdditionalData) {\n        this.internal(LogLevel.INFO, message, data);\n    }\n\n    /**\n     * Logs a `DEBUG` message. By default, it will not be written to the console. To see `DEBUG`\n     * messages in the console, set the log level to `DEBUG` either using the `log.setLevel(log.LEVELS.DEBUG)`\n     * method or using the environment variable `APIFY_LOG_LEVEL=DEBUG`. Data are stringified and appended\n     * to the message.\n     */\n    debug(message: string, data?: AdditionalData) {\n        this.internal(LogLevel.DEBUG, message, data);\n    }\n\n    perf(message: string, data?: AdditionalData) {\n        this.internal(LogLevel.PERF, message, data);\n    }\n\n    /**\n     * Logs a `WARNING` level message only once.\n     */\n    warningOnce(message: string) {\n        if (this.warningsOnceLogged.has(message)) return;\n\n        this.warningsOnceLogged.add(message);\n        this.warning(message);\n    }\n\n    /**\n     * Logs given message only once as WARNING. It's used to warn user that some feature he is using has been deprecated.\n     */\n    deprecated(message: string) {\n        this.warningOnce(message);\n    }\n}\n","import { Log } from './log';\n\nexport * from './log';\nexport * from './log_consts';\nexport * from './log_helpers';\nexport * from './logger';\nexport * from './logger_json';\nexport * from './logger_text';\n\n// Default export is an initialized instance of logger.\nconst log = new Log();\nexport default log;\n"],"mappings":"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","names":["LogLevel","LogFormat","DEFAULT_OPTIONS"]}
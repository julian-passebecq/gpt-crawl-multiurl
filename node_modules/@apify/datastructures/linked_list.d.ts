export declare class LinkedListNode<T> {
    readonly data: T;
    prev?: LinkedListNode<T> | null;
    next?: LinkedListNode<T> | null;
    dictKey?: string;
    constructor(data: T);
}
/**
 * A class representing a doubly-linked list.
 */
export declare class LinkedList<T = any> {
    head?: LinkedListNode<T> | null;
    tail?: LinkedListNode<T> | null;
    length: number;
    /**
      * Appends a new node with specific data to the end of the linked list.
      */
    add(data: T, toFirstPosition?: boolean): LinkedListNode<T>;
    /**
     * Appends a new node to the end of the linked list or the beginning if firstPosition is true-ish.
     */
    addNode(node: LinkedListNode<T>, toFirstPosition?: boolean): void;
    /**
     * Finds a first node that holds a specific data object. See 'dataEqual' function for a description
     * how the object equality is tested. Function returns null if the data cannot be found.
     */
    find(data: T): LinkedListNode<T> | null;
    removeNode(node: LinkedListNode<T>): void;
    /**
     * Removes the first item from the list. The function
     * returns the item object or null if the list is empty.
     */
    removeFirst(): T | null;
}

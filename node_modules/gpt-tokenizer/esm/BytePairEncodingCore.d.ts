import { EncoderMap } from './EncoderMap.js';
export declare class BytePairEncodingCore {
    encoder: EncoderMap;
    decoder: Map<number, Uint8Array>;
    tokenSplitRegex: RegExp;
    specialTokensEncoder: Map<string, number>;
    specialTokensDecoder: Map<number, Uint8Array>;
    specialTokenPatternRegex: RegExp;
    textEncoder: TextEncoder;
    constructor({ bytePairEncoder, specialTokenEncoder, tokenSplitRegex, }: {
        bytePairEncoder: EncoderMap;
        specialTokenEncoder?: Map<string, number>;
        tokenSplitRegex: RegExp;
    });
    encodeNative(text: string, allowedSpecial: Set<string>): Generator<number[], number>;
    findNextSpecialStartIndex(text: string, allowedSpecial: Set<string>, startIndex: number, specialRegex: RegExp): number | undefined;
    decodeNative(tokens: Iterable<number>): Generator<Uint8Array>;
    decodeNativeAsync(tokens: AsyncIterable<number>): AsyncGenerator<Uint8Array>;
    tryDecodeToken(token: number): Uint8Array | undefined;
    bytePairEncode(inputBytes: Uint8Array, bytePairRanks: EncoderMap): number[];
    bytePairMerge(piece: Uint8Array, bytePairRanks: EncoderMap, transform: (pair: {
        start: number;
        end: number;
    }) => number): number[];
}

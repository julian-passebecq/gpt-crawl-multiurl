export declare class EncoderMap implements Map<Uint8Array, number> {
    [Symbol.toStringTag]: string;
    private encoder;
    constructor(encoder?: Map<Uint8Array, number> | Iterable<readonly [Uint8Array, number]>);
    get size(): number;
    clear(): void;
    delete(key: Uint8Array): boolean;
    forEach(callbackfn: (value: number, key: Uint8Array, map: EncoderMap) => void): void;
    get(key: Uint8Array): number | undefined;
    getOrThrow(key: Uint8Array): number;
    has(key: Uint8Array): boolean;
    set(key: Uint8Array, value: number): this;
    entries(): IterableIterator<[Uint8Array, number]>;
    keys(): IterableIterator<Uint8Array>;
    values(): IterableIterator<number>;
    [Symbol.iterator](): IterableIterator<[Uint8Array, number]>;
}
